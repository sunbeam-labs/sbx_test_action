name: 'Test Sunbeam Extension'
description: 'Test full run of sunbeam extension'
branding:
  icon: 'check-circle'
  color: 'green'
inputs:
  sunbeam-version:
    description: 'Branch or tag of sunbeam to install'
    required: false
    default: 'main'
  other-extensions:
    description: 'Any other extensions needed to run this one (use comma-separated string like "sunbeam-labs/sbx_one,other-user/sbx_two")'
    required: false
    default: ''
  test-directory:
    description: 'Directory that contains e2e tests which need all of sunbeam to run'
    required: false
    default: '.tests/'
  snakefmt-directory:
    description: 'Path to snakefiles for linting'
    required: false
    default: '*.smk'
  black-directory:
    description: 'Path to python files for linting'
    required: false
    default: '.'
    
runs:
  using: "composite"
  steps:
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-name: lockenv
          create-args: python=3.11
          init-shell: bash
          cache-downloads: true
      
      - name: Install Sunbeam
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          git clone --depth 1 --branch ${{ inputs.sunbeam-version }} https://github.com/sunbeam-labs/sunbeam.git sunbeam
          cd sunbeam
          pip install -e .[dev]
      
      - name: Install extra extensions
        shell: bash -l {0}
        env:
          EXTENSIONS_LIST: ${{ inputs.other-extensions }}
        run: |
          export SUNBEAM_EXTENSIONS=$(dirname "${GITHUB_WORKSPACE}")

          for i in ${EXTENSIONS_LIST//,/ }
          do
              echo "Installing extension: $i" >> $GITHUB_STEP_SUMMARY
              sunbeam extend https://github.com/$i
          done

      - name: Run extension scripts tests
        shell: bash -l {0}
        run: |
          # Run pytest only against the extension's scripts directory.
          # Do not use set -e so we can inspect pytest's exit code and act accordingly.
          TARGET="${GITHUB_WORKSPACE}/scripts"

          if [ ! -d "$TARGET" ]; then
            echo "No scripts directory at $TARGET" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Run pytest and capture exit code. Allow pytest to return non-zero without killing the script.
          pytest -q "$TARGET" || true
          rc=$?

          if [ "$rc" -eq 0 ]; then
            echo "Extension scripts tests passed (rc=0)" >> $GITHUB_STEP_SUMMARY
            exit 0
          elif [ "$rc" -eq 1 ]; then
            echo "Extension scripts tests failed (rc=1)" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ "$rc" -eq 4 ] || [ "$rc" -eq 5 ]; then
            echo "No extension scripts tests found (pytest rc=${rc}) — continuing" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "pytest exited with unexpected code ${rc} — failing step" >> $GITHUB_STEP_SUMMARY
            exit $rc
          fi

      - name: Lint
        shell: bash -l {0}
        run: |
          set -euo pipefail
          echo "Snakefmt check..."
          snakefmt --check ${{ inputs.snakefmt-directory }}
          echo "Linted snakefiles: ${{ inputs.snakefmt-directory }}" >> $GITHUB_STEP_SUMMARY
          echo "Black check..."
          black --check --diff ${{ inputs.black-directory }}
          echo "Linted python files: ${{ inputs.black-directory }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Run Tests
        shell: bash -l {0}
        run: |
          export SUNBEAM_EXTENSIONS=$(dirname "${GITHUB_WORKSPACE}")
          echo "Extensions found: $(ls "$SUNBEAM_EXTENSIONS")" >> $GITHUB_STEP_SUMMARY
          pytest -vvvv -l --tb=long "${{ inputs.test-directory }}"
